from config import *

# external
from typing import Any, List, NoReturn, Union as U
from selenium.webdriver.common.alert import Alert
from selenium.webdriver.remote.webelement import WebElement
from selenium.webdriver.remote.webdriver import WebDriver

# internal

class Browser:

	driver: WebDriver = ...
	implicit_wait: int = ...
	log: Any = ...
	speed: int = ...
	timeout: bool = ...

	def set_implicit_wait(self, time_to_wait: int) -> NoReturn: ...
	def unset_implicit_wait(self) -> NoReturn: ...

	""" CONSTRUCTOR FUNCTIONS """
	def __init__(self, browser: str = 'ff' , desired_capabilities: dict = None,
	             profile: object = None, options: object = None) -> NoReturn: ...
	# def get_attributes(self, libraries: List[object]) -> NoReturn : ...
	# def get_members(self, library: object) -> tuple: ...

	""" from base.py """
	def find_element(self, locator: U[WebElement, str], tag: str=None,
	                 required: bool=True, parent: U[WebDriver, WebElement]=None) -> WebElement : ...
	def find_elements(self, locator: U[WebElement, str], tag: str=None,
	                  required: bool=False, parent: U[WebDriver, WebElement]=None) -> List[WebElement] : ...
	def is_text_present(self, text: str) -> bool: ...
	def is_element_enabled(self, locator: U[WebElement, str], tag: str=None) -> bool: ...
	def is_visible(self, locator: U[WebElement, str]) -> bool: ...

	""" from alert.py """
	def get_alert(self, timeout: int=DEFAULT_TIMEOUT) -> Alert: ...
	def get_alert_text(self, timeout: int=DEFAULT_TIMEOUT) -> str: ...
	def handle_alert(self, action: str='accept', timeout: int=DEFAULT_TIMEOUT) -> str: ...
	def input_text_into_alert(self, text: str, action: str='accept',
	                          timeout: int=None) -> str: ...

	""" from browsermanagement.py """
	def back(self) -> NoReturn: ...
	def forward(self) -> NoReturn: ...
	def close_browser(self) -> NoReturn: ...
	def close_session(self) -> NoReturn: ...
	def get_session_id(self) -> str: ...
	def get_source(self) -> str: ...
	def get_title(self) -> str: ...
	def get_url(self) -> str: ...
	def goto(self, url: str) -> NoReturn: ...
	def refresh(self) -> NoReturn: ...

	""" from element.py """
	def clear_element_text(self, locator: U[WebElement, str]) -> NoReturn: ...
	def click_button(self, locator: U[WebElement, str]) -> NoReturn: ...
	def click_element(self, locator: U[WebElement, str]) -> NoReturn: ...
	def click_element_at_coordinates(self, locator: U[WebElement, str],
	                                 xoffset: int, yoffset: int) -> NoReturn: ...
	def click_image(self, locator: U[WebElement, str]) -> NoReturn: ...
	def double_click_element(self, locator: U[WebElement, str]) -> NoReturn: ...
	def drag_and_drop(self, locator: U[WebElement, str],
	                  target: U[WebElement, str]) -> NoReturn: ...
	def element_text_contains(self, locator: U[WebElement, str], expected: str,
	                          ignore_case: bool=True) -> bool: ...
	def element_text_is(self, locator: U[WebElement, str], expected: str,
	                    ignore_case: bool=False) -> bool: ...
	def get_element_attribute(self, locator: U[WebElement, str], attribute: str) -> str: ...
	def get_element_property(self, locator: U[WebElement, str], prop: str) -> str: ...
	def get_element_size(self, locator: U[WebElement, str]) -> (int, int): ...
	def get_text(self, locator: U[WebElement, str]) -> str: ...
	def page_contains_text(self, text:str) -> bool: ...
	def press_keys(self, locator: U[WebElement, str]=None,
	               *keys: U[List[str], str]) -> NoReturn: ...
	def highlight_elements(self, locator: U[WebElement, str], tag: str=None) -> NoReturn: ...
	def set_focus_to_element(self, locator: U[WebElement, str]) -> NoReturn: ...
	def mouse_down(self, locator: U[WebElement, str]) -> NoReturn: ...
	def mouse_out(self, locator: U[WebElement, str]) -> NoReturn: ...
	def mouse_over(self, locator: U[WebElement, str]) -> NoReturn: ...
	def mouse_up(self, locator: U[WebElement, str]) -> NoReturn: ...
	def scroll_element_into_view(self, locator: U[WebElement, str]) -> NoReturn: ...
	def simulate_event(self, locator: U[WebElement, str], event: str) -> NoReturn: ...
